{"version":3,"sources":["ItemCard.js","SearchBar.js","CreateCard.js","FoodDatabase.js","Search.js","MealList.js","NutritionSummary.js","LogList.js","App.js","serviceWorker.js","index.js"],"names":["ItemCard","props","className","onClick","event","e","currentTarget","classList","toggle","content","nextElementSibling","style","maxHeight","scrollHeight","expandCard","item","actionLabel","actionCall","actionStyle","SearchBar","type","value","currentSearch","onChange","updateSearch","target","placeholder","CreateCard","useState","calories","setCalories","totalFat","setTotalFat","cholesterol","setCholesterol","sodium","setSodium","potasium","setPotasium","carbs","setCarbs","fiber","setFiber","sugars","setSugar","protein","setProtein","vita","setVita","vitc","setVitc","calcium","setCalcium","iron","setIron","search","newItem","parseInt","addNewItem","FoodDatabase","searchResults","setSearchResults","foodItems","setFoodItems","filterSearch","ret","toLowerCase","indexOf","charAt","split","forEach","word","useEffect","res","require","filter","map","index","key","expanded","addFood","meal","Search","setCurrentSearch","update","setLog","MealList","activeSearch","setActiveSearch","listItems","slice","splice","updateMeal","removeMeal","mealName","concat","addMeal","NutritionSummary","expandSummary","nutrition","LogList","id","date","changeLog","logInd","totalLogs","meals","App","setLogInd","setTotalLogs","setDate","breakfast","setBreakfast","lunch","setLunch","dinner","setDinner","setNutrition","input","length","data","sum","nutri","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o2EAsDeA,MAlDf,SAAkBC,GAahB,OACA,yBAAKC,UAAU,YACb,yBAAKA,UAAU,WAAWC,QAAS,SAACC,GAAD,OAZrC,SAAoBC,GAClBA,EAAEC,cAAcC,UAAUC,OAAO,UACjC,IAAIC,EAAUJ,EAAEC,cAAcI,mBAC1BD,EAAQE,MAAMC,UAChBH,EAAQE,MAAMC,UAAY,KAE1BH,EAAQE,MAAMC,UAAoC,IAAvBH,EAAQI,aAAuB,KAMdC,CAAWV,KACvD,yBAAKF,UAAU,aACb,4BAAKD,EAAMc,KAAN,MACL,uBAAGb,UAAU,WAAWD,EAAMc,KAAN,SAE1B,yBAAKb,UAAU,YACb,uBAAGA,UAAU,WAAWD,EAAMc,KAAN,oBACxB,uBAAGb,UAAU,WAAb,cAGJ,yBAAKA,UAAU,WACb,yBAAKA,UAAU,oBACb,yCAAc,0BAAMA,UAAU,WAAWD,EAAMc,KAAN,mBAAsC,OAC/E,2CAAgB,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,sBAAyC,QACpF,sCAAW,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,iBAAoC,QAC1E,wCAAa,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,mBAAsC,QAC9E,qCAAU,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,gBAAmC,OACxE,qCAAU,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,gBAAmC,OACxE,sCAAW,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,iBAAoC,OAC1E,uCAAY,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,kBAAqC,OAC5E,yCAAc,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,eAAkC,MAC3E,yCAAc,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,eAAkC,MAC3E,sCAAW,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,kBAAqC,MAC3E,oCAAS,0BAAMb,UAAU,WAAWD,EAAMc,KAAN,eAAkC,OAGtEd,EAAMe,aACJ,yBAAKd,UAAU,aAAaC,QAAS,kBAAMF,EAAMgB,WAAWhB,EAAMc,QAAO,uBAAGb,UAAWD,EAAMiB,aAAcjB,EAAMe,iBCjC5GG,MAVf,SAAmBlB,GACjB,OACE,yBAAKC,UAAU,aACb,2BAAOA,UAAU,cAAckB,KAAK,OAAOC,MAAOpB,EAAMqB,cAAeC,SAAU,SAACnB,GAAD,OAAWH,EAAMuB,aAAapB,EAAMqB,OAAOJ,QAAQK,YAAY,kB,MCkFvIC,MAnFf,SAAoB1B,GAAO,IAAD,EAEQ2B,mBAAS,IAFjB,mBAEjBC,EAFiB,KAEPC,EAFO,OAGQF,mBAAS,IAHjB,mBAGjBG,EAHiB,KAGPC,EAHO,OAIcJ,mBAAS,IAJvB,mBAIjBK,EAJiB,KAIJC,EAJI,OAKIN,mBAAS,IALb,mBAKjBO,EALiB,KAKTC,EALS,OAMQR,mBAAS,IANjB,mBAMjBS,EANiB,KAMPC,EANO,OAOEV,mBAAS,IAPX,mBAOjBW,EAPiB,KAOVC,EAPU,OAQEZ,mBAAS,IARX,mBAQjBa,EARiB,KAQVC,EARU,OASGd,mBAAS,IATZ,mBASjBe,EATiB,KASTC,EATS,OAUMhB,mBAAS,IAVf,mBAUjBiB,EAViB,KAURC,EAVQ,OAWAlB,mBAAS,IAXT,mBAWjBmB,EAXiB,KAWXC,EAXW,OAYApB,mBAAS,IAZT,mBAYjBqB,EAZiB,KAYXC,EAZW,OAaMtB,mBAAS,IAbf,mBAajBuB,EAbiB,KAaRC,EAbQ,OAcAxB,mBAAS,IAdT,mBAcjByB,GAdiB,KAcXC,GAdW,KAoDxB,OACA,yBAAKpD,UAAU,cACb,yBAAKA,UAAU,WAAWC,QAAS,SAACC,GAAD,OArCrC,SAAoBC,GAClBA,EAAEC,cAAcC,UAAUC,OAAO,UACjC,IAAIC,EAAUJ,EAAEC,cAAcI,mBAC1BD,EAAQE,MAAMC,UAChBH,EAAQE,MAAMC,UAAY,KAE1BH,EAAQE,MAAMC,UAAYH,EAAQI,aAAe,KA+BLC,CAAWV,KACvD,sCAAYH,EAAMsD,OAAlB,MAEF,yBAAKrD,UAAU,WAEX,2BAAOA,UAAU,cAAckB,KAAK,OAAOC,MAAOpB,EAAMsD,OAAQhC,SAAU,SAACnB,GAAD,OAAWH,EAAMuB,aAAapB,EAAMqB,OAAOJ,QAAQK,YAAY,YACzI,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOQ,EAAUN,SAAU,SAACnB,GAAD,OAAW0B,EAAY1B,EAAMqB,OAAOJ,QAAQK,YAAY,gBAC9H,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOU,EAAUR,SAAU,SAACnB,GAAD,OAAW4B,EAAY5B,EAAMqB,OAAOJ,QAAQK,YAAY,qBAC9H,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOY,EAAaV,SAAU,SAACnB,GAAD,OAAW8B,EAAe9B,EAAMqB,OAAOJ,QAAQK,YAAY,wBACpI,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOc,EAAQZ,SAAU,SAACnB,GAAD,OAAWgC,EAAUhC,EAAMqB,OAAOJ,QAAQK,YAAY,mBAC1H,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOgB,EAAUd,SAAU,SAACnB,GAAD,OAAWkC,EAAYlC,EAAMqB,OAAOJ,QAAQK,YAAY,qBAC9H,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOkB,EAAOhB,SAAU,SAACnB,GAAD,OAAWoC,EAASpC,EAAMqB,OAAOJ,QAAQK,YAAY,iBACxH,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOoB,EAAOlB,SAAU,SAACnB,GAAD,OAAWsC,EAAStC,EAAMqB,OAAOJ,QAAQK,YAAY,iBACxH,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOsB,EAAQpB,SAAU,SAACnB,GAAD,OAAWwC,EAASxC,EAAMqB,OAAOJ,QAAQK,YAAY,iBACzH,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOwB,EAAStB,SAAU,SAACnB,GAAD,OAAW0C,EAAW1C,EAAMqB,OAAOJ,QAAQK,YAAY,mBAC5H,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAO0B,EAAMxB,SAAU,SAACnB,GAAD,OAAW4C,EAAQ5C,EAAMqB,OAAOJ,QAAQK,YAAY,qBACtH,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAO4B,EAAM1B,SAAU,SAACnB,GAAD,OAAW8C,EAAQ9C,EAAMqB,OAAOJ,QAAQK,YAAY,qBACtH,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAO8B,EAAS5B,SAAU,SAACnB,GAAD,OAAWgD,EAAWhD,EAAMqB,OAAOJ,QAAQK,YAAY,mBAC5H,2BAAOxB,UAAU,cAAckB,KAAK,OAAOC,MAAOgC,GAAM9B,SAAU,SAACnB,GAAD,OAAWkD,GAAQlD,EAAMqB,OAAOJ,QAAQK,YAAY,gBAEpHzB,EAAMe,aACJ,yBAAKd,UAAU,aAAaC,QAAS,kBA/C/C,WACE,IAAIqD,EAAU,CACZ,KAAQvD,EAAMsD,OACd,OAAU,eACV,UAAa,CACX,SAAyB,KAAb1B,EAAkB4B,SAAS5B,GAAY,EACnD,SAAyB,KAAbE,EAAkB0B,SAAS1B,GAAY,EACnD,YAA+B,KAAhBE,EAAqBwB,SAASxB,GAAe,EAC5D,OAAqB,KAAXE,EAAgBsB,SAAStB,GAAU,EAC7C,SAAyB,KAAbE,EAAkBoB,SAASpB,GAAY,EACnD,MAAmB,KAAVE,EAAekB,SAASlB,GAAS,EAC1C,MAAmB,KAAVE,EAAegB,SAAShB,GAAS,EAC1C,OAAqB,KAAXE,EAAgBc,SAASd,GAAU,EAC7C,QAAuB,KAAZE,EAAiBY,SAASZ,GAAW,EAChD,KAAiB,KAATE,EAAcU,SAASV,GAAQ,EACvC,KAAiB,KAATE,EAAcQ,SAASR,GAAQ,EACvC,QAAuB,KAAZE,EAAiBM,SAASN,GAAW,EAChD,KAAiB,KAATE,GAAcI,SAASJ,IAAQ,IAI3CpD,EAAMgB,WAAWuC,GA0BkCE,KAAc,uBAAGxD,UAAWD,EAAMiB,aAAcjB,EAAMe,iBChB9F2C,MA5Df,SAAsB1D,GAAM,MAGgB2B,mBAAS,IAHzB,mBAGnBgC,EAHmB,KAGJC,EAHI,OAKQjC,mBAAS,IALjB,mBAKnBkC,EALmB,KAKRC,EALQ,KAS1B,SAASC,EAAajD,GAEpB,IAAIkD,GAAM,EAiBV,OAfsE,IAAnElD,EAAI,KAASmD,cAAcC,QAAQlE,EAAMsD,OAAOW,gBAAyBnD,EAAI,KAASmD,cAAcC,QAAQlE,EAAMsD,OAAOW,gBAAkB,GAA+F,MAA1FnD,EAAI,KAASqD,OAAOrD,EAAI,KAASmD,cAAcC,QAAQlE,EAAMsD,OAAOW,eAAe,MACpOD,GAAM,GAGRlD,EAAI,KAASsD,MAAM,KAAKC,SAAQ,SAACC,GAC+B,IAA3DA,EAAKL,cAAcC,QAAQlE,EAAMsD,OAAOW,iBACzCD,GAAM,MAGVlD,EAAI,OAAWsD,MAAM,KAAKC,SAAQ,SAACC,GAC6B,IAA3DA,EAAKL,cAAcC,QAAQlE,EAAMsD,OAAOW,iBACzCD,GAAM,MAIFA,EAmBV,OAdAO,qBAAU,WACN,IAAIC,EAAMC,EAAQ,IAClBb,EAAiBY,EAAG,SACrB,CAACxE,EAAMsD,SAGViB,qBAAU,WACRT,EAAaH,EAAce,OAAOX,GAAcY,KAAI,SAAC7D,EAAM8D,GAAP,OAClD,yBAAKC,IAAKD,GAAO,kBAAC,EAAD,CAAU9D,KAAMA,EAAMgE,UAAU,EAAO7D,YAAY,MAAMD,WAAY,SAACF,GAAD,OAAUd,EAAM+E,QAAQjE,IAAOC,YAAY,eAElI,CAACf,EAAMsD,OAAQK,EAAe3D,EAAMgF,OAInB,KAAjBhF,EAAMsD,OACA,KAGL,6BAAMO,EACN,6BAAK,kBAAC,EAAD,CAAYP,OAAQtD,EAAMsD,OAAQrC,YAAY,MAAMD,WAAY,SAACF,GAAD,OAAUd,EAAM+E,QAAQjE,IAAOC,YAAY,eAAeQ,aAAc,SAACH,GAAD,OAAWpB,EAAMuB,aAAaH,S,MCnClK6D,MAhBf,SAAgBjF,GAAM,MAGsB2B,mBAAS,IAH/B,mBAGbN,EAHa,KAGE6D,EAHF,KAMpB,OACE,yBAAKjF,UAAU,cACb,yBAAKA,UAAU,aACf,kBAAC,EAAD,CAAWoB,cAAeA,EAAeE,aAAc,SAAC4D,GAAD,OAAYD,EAAiBC,MACpF,kBAAC,EAAD,CAAc7B,OAAQjC,EAAe2D,KAAMhF,EAAMgF,KAAMD,QAAS,SAACjE,GAAD,OAAUd,EAAMoF,OAAOtE,IAAOS,aAAc,SAAC4D,GAAD,OAAYD,EAAiBC,Q,MCgChIE,MA1Cf,SAAkBrF,GAAM,MAGkB2B,oBAAS,GAH3B,mBAGf2D,EAHe,KAGDC,EAHC,KAqBhBC,EADQxF,EAAMgF,KACIL,KAAI,SAAC7D,EAAM8D,GACjC,OACE,yBAAKC,IAAKD,GAAO,kBAAC,EAAD,CAAU9D,KAAMA,EAAMgE,UAAU,EAAO7D,YAAY,SAASD,WAAY,SAACF,GAAD,OAjB7F,SAAoB8D,GAClB,IAAIO,EAASnF,EAAMgF,KAAKS,QACxBN,EAAOO,OAAOd,EAAO,GACrB5E,EAAM2F,WAAWR,GAcoFS,CAAWhB,IAAQ7D,YAAY,eAKtI,OACE,yBAAKd,UAAWD,EAAM6F,SAAS,iBAC7B,wBAAI5F,UAAU,kBAAkBD,EAAM6F,UACtC,6BAAML,EACN,yBAAKvF,UAAU,gBAAgBC,QAAS,kBAAMqF,GAAiBD,KAAiBA,EAAgB,QAAU,QAGxGA,GACA,kBAAC,EAAD,CAAQN,KAAMhF,EAAMgF,KAAMI,OAAQ,SAACtE,GAAD,OAvBxC,SAAiBA,GACf,IAAIqE,EAASnF,EAAMgF,KAAKc,OAAO,CAAChF,IAChCd,EAAM2F,WAAWR,GAqB+BY,CAAQjF,Q,MCiB7CkF,MAvDf,SAA0BhG,GAexB,OACE,yBAAKC,UAAU,oBACb,wBAAIA,UAAU,iBAAiBC,QAAS,SAACC,GAAD,OAd5C,SAAuBC,GACrBA,EAAEC,cAAcC,UAAUC,OAAO,UACjC,IAAIC,EAAUJ,EAAEC,cAAcI,mBAC1BD,EAAQE,MAAMC,WAChBH,EAAQE,MAAMC,UAAY,KAC1BH,EAAQF,UAAUC,OAAO,YAEzBC,EAAQE,MAAMC,UAAoC,IAAvBH,EAAQI,aAAuB,KAC1DJ,EAAQF,UAAUC,OAAO,WAM0B0F,CAAc9F,KAAjE,qBACA,yBAAKF,UAAU,sBAEb,yBAAKA,UAAU,aAEf,mCAAQ,0BAAMA,UAAU,UAAhB,SAAR,MAAiDD,EAAM4B,SAAS,0BAAM3B,UAAU,UAAhB,mBAAhE,MAAkH,0BAAMA,UAAU,aAAa,IAAKD,EAAM4B,SAAS,0BAAM3B,UAAU,UAAhB,yBAGnK,yBAAKA,UAAU,oBACb,yCAAc,0BAAMA,UAAU,WAAWD,EAAMkG,UAAN,SAA8B,OACvE,6BACA,2CAAgB,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,YAAiC,QAC5E,6BACA,sCAAW,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,OAA4B,QAClE,6BACA,wCAAa,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,SAA8B,QACtE,6BACA,qCAAU,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,MAA2B,OAChE,6BACA,qCAAU,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,MAA2B,OAChE,6BACA,sCAAW,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,OAA4B,OAClE,6BACA,uCAAY,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,QAA6B,OACpE,6BACA,yCAAc,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,KAA0B,MACnE,6BACA,yCAAc,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,KAA0B,MACnE,6BACA,sCAAW,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,QAA6B,MACnE,6BACA,oCAAS,0BAAMjG,UAAU,WAAWD,EAAMkG,UAAN,KAA0B,U,MC7BzDC,MAjBf,SAAiBnG,GACf,OACE,yBAAKC,UAAU,WACb,wBAAImG,GAAG,WAAWpG,EAAMqG,MACxB,wBAAID,GAAG,aAAY,0BAAMnG,UAAU,YAAYC,QAAS,kBAAMF,EAAMsG,UAAUtG,EAAMuG,OAAO,KAAMvG,EAAMuG,OAASvG,EAAMwG,UAAU,EAAK,UAAO,IAA5I,KAAwJ,0BAAMvG,UAAU,YAAYC,QAAS,kBAAMF,EAAMsG,UAAUtG,EAAMuG,OAAO,KAAMvG,EAAMuG,OAAS,EAAK,UAAO,KACjQ,kBAAC,EAAD,CAAkBL,UAAWlG,EAAMkG,UAAWtE,SAAU5B,EAAM4B,WAE9D,yBAAK3B,UAAU,gBACf,kBAAC,EAAD,CAAU4F,SAAS,YAAYb,KAAMhF,EAAMyG,MAAN,UAA0Bd,WAAY,SAACR,GAAD,OAAYnF,EAAMoF,OAAN,UAA0BD,MACjH,kBAAC,EAAD,CAAUU,SAAS,QAAQb,KAAMhF,EAAMyG,MAAN,MAAsBd,WAAY,SAACR,GAAD,OAAYnF,EAAMoF,OAAN,MAAsBD,MACrG,kBAAC,EAAD,CAAUU,SAAS,SAASb,KAAMhF,EAAMyG,MAAN,OAAuBd,WAAY,SAACR,GAAD,OAAYnF,EAAMoF,OAAN,OAAuBD,S,MCsG/FuB,MAhHf,WAAe,MAGe/E,mBAAS,GAHxB,mBAGN4E,EAHM,KAGEI,EAHF,OAIqBhF,mBAAS,MAJ9B,mBAIN6E,EAJM,KAIKI,EAJL,OAOWjF,mBAAS,MAPpB,mBAON0E,EAPM,KAOAQ,EAPA,OAQmBlF,mBAAS,MAR5B,mBAQNC,EARM,KAQIC,EARJ,OASqBF,mBAAS,IAT9B,mBASNmF,EATM,KASKC,EATL,OAUapF,mBAAS,IAVtB,mBAUNqF,EAVM,KAUCC,EAVD,OAWetF,mBAAS,IAXxB,mBAWNuF,EAXM,KAWEC,EAXF,OAYqBxF,mBAAS,IAZ9B,mBAYNuE,EAZM,KAYKkB,EAZL,KA8Eb,OA/DA7C,qBAAU,WACR,IAAI8C,EAAQ5C,EAAQ,GACpBmC,EAAaS,EAAK,KAASC,UAC1B,IAGH/C,qBAAU,WACR,IACIgD,EADQ9C,EAAQ,GACJ,KAAS8B,GACzBM,EAAQU,EAAI,MACZ1F,EAAY0F,EAAI,UAChBR,EAAaQ,EAAI,WACjBN,EAASM,EAAI,OACbJ,EAAUI,EAAI,UAEb,CAAChB,IAKJhC,qBAAU,WACR,IAAIiD,EAAM,EACNC,EAAQ,CACV,SAAY,EACZ,YAAe,EACf,OAAU,EACV,SAAY,EACZ,MAAS,EACT,MAAS,EACT,OAAU,EACV,QAAW,EACX,KAAQ,EACR,KAAQ,EACR,QAAW,EACX,KAAQ,GAGVX,EAAUzC,SAAQ,SAACvD,GAGjB,IAAI,IAAI+D,KAFR2C,GAAK1G,EAAI,UAAJ,SAEU2G,EACbA,EAAM5C,IAAQ/D,EAAI,UAAc+D,MAGpCmC,EAAM3C,SAAQ,SAACvD,GAEb,IAAI,IAAI+D,KADR2C,GAAK1G,EAAI,UAAJ,SACU2G,EACbA,EAAM5C,IAAQ/D,EAAI,UAAc+D,MAGpCqC,EAAO7C,SAAQ,SAACvD,GAEd,IAAI,IAAI+D,KADR2C,GAAK1G,EAAI,UAAJ,SACU2G,EACbA,EAAM5C,IAAQ/D,EAAI,UAAc+D,MAIpCuC,EAAaK,GACb5F,EAAY2F,KAGX,CAACV,EAAWE,EAAOE,IAEV,OAATb,EACM,KAGL,yBAAKpG,UAAU,OAEb,wBAAImG,GAAG,YAAP,eACA,uBAAGA,GAAG,gBAAN,OAEA,kBAAC,EAAD,CACAK,MAAO,CACL,UAAaK,EACb,MAASE,EACT,OAAUE,GAEZb,KAAMA,EACNzE,SAAUA,EACVwD,OAAQ,CACN,UAAa,SAACD,GAAD,OAAY4B,EAAa5B,IACtC,MAAS,SAACA,GAAD,OAAY8B,EAAS9B,IAC9B,OAAU,SAACA,GAAD,OAAYgC,EAAUhC,KAElCe,UAAWA,EACXK,OAAQA,EACRD,UAAW,SAACnB,GAAD,OAAYwB,EAAUxB,IACjCqB,UAAWA,MChGCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3bcb6895.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/ItemCard.scss'\n\n//Highly re-usable component to display any food item in this application\nfunction ItemCard(props){\n\n  //Toggles the nutrition info for the item card\n  function expandCard(e){\n    e.currentTarget.classList.toggle(\"active\");\n    var content = e.currentTarget.nextElementSibling\n    if (content.style.maxHeight){\n      content.style.maxHeight = null;\n    } else {\n      content.style.maxHeight = (content.scrollHeight * 1.10) + \"px\";\n    }\n  }\n\n  return(\n  <div className=\"itemCard\">\n    <div className=\"mainCard\" onClick={(event) => expandCard(event)}>\n      <div className=\"cardTitle\">\n        <h3>{props.item[\"name\"]}</h3>\n        <p className=\"subText\">{props.item[\"source\"]}</p>\n      </div>\n      <div className=\"cardCals\">\n        <p className=\"itemCal\">{props.item[\"nutrition\"][\"calories\"]}</p>\n        <p className=\"subText\">Calories</p>\n      </div>\n    </div>\n    <div className=\"subCard\">\n      <div className=\"nutritionSection\">\n        <p>Total Fat: <span className=\"nutData\">{props.item[\"nutrition\"][\"totalFat\"] + \" g\"}</span></p>\n        <p>Cholesterol: <span className=\"nutData\">{props.item[\"nutrition\"][\"cholesterol\"] + \" mg\"}</span></p>\n        <p>Sodium: <span className=\"nutData\">{props.item[\"nutrition\"][\"sodium\"] + \" mg\"}</span></p>\n        <p>Potasium: <span className=\"nutData\">{props.item[\"nutrition\"][\"potasium\"] + \" mg\"}</span></p>\n        <p>Carbs: <span className=\"nutData\">{props.item[\"nutrition\"][\"carbs\"] + \" g\"}</span></p>\n        <p>Fiber: <span className=\"nutData\">{props.item[\"nutrition\"][\"fiber\"] + \" g\"}</span></p>\n        <p>Sugars: <span className=\"nutData\">{props.item[\"nutrition\"][\"sugars\"] + \" g\"}</span></p>\n        <p>Protein: <span className=\"nutData\">{props.item[\"nutrition\"][\"protein\"] + \" g\"}</span></p>\n        <p>Vitamin A: <span className=\"nutData\">{props.item[\"nutrition\"][\"vita\"] + \"%\"}</span></p>\n        <p>Vitamin C: <span className=\"nutData\">{props.item[\"nutrition\"][\"vitc\"] + \"%\"}</span></p>\n        <p>Calium: <span className=\"nutData\">{props.item[\"nutrition\"][\"calcium\"] + \"%\"}</span></p>\n        <p>Iron: <span className=\"nutData\">{props.item[\"nutrition\"][\"iron\"] + \"%\"}</span></p>\n      </div>\n\n      { props.actionLabel &&\n          <div className=\"cardAction\" onClick={() => props.actionCall(props.item)}><p className={props.actionStyle}>{props.actionLabel}</p></div>\n      }\n    </div>\n  </div>\n  );\n}\n\n\nexport default ItemCard;\n","import React from 'react';\n\n\nfunction SearchBar(props){\n  return(\n    <div className=\"searchBar\">\n      <input className=\"searchInput\" type=\"text\" value={props.currentSearch} onChange={(event) => props.updateSearch(event.target.value)} placeholder=\"Add Food...\"></input>\n    </div>\n  )\n\n}\n\n\nexport default SearchBar;\n","import React, { useState } from 'react';\nimport './styles/CreateCard.scss';\nimport './styles/ItemCard.scss';\n\n\nfunction CreateCard(props){\n\n  const [calories, setCalories] = useState('');\n  const [totalFat, setTotalFat] = useState('');\n  const [cholesterol, setCholesterol] = useState('');\n  const [sodium, setSodium] = useState('');\n  const [potasium, setPotasium] = useState('');\n  const [carbs, setCarbs] = useState('');\n  const [fiber, setFiber] = useState('');\n  const [sugars, setSugar] = useState('');\n  const [protein, setProtein] = useState('');\n  const [vita, setVita] = useState('');\n  const [vitc, setVitc] = useState('');\n  const [calcium, setCalcium] = useState('');\n  const [iron, setIron] = useState('');\n\n\n  function expandCard(e){\n    e.currentTarget.classList.toggle(\"active\");\n    var content = e.currentTarget.nextElementSibling\n    if (content.style.maxHeight){\n      content.style.maxHeight = null;\n    } else {\n      content.style.maxHeight = content.scrollHeight + \"px\";\n    }\n  }\n\n  //Maps the state to the a JSON object to be added to the food log\n  function addNewItem(){\n    var newItem = {\n      \"name\": props.search,\n      \"source\": \"User Created\",\n      \"nutrition\": {\n        \"calories\": calories !== '' ? parseInt(calories) : 0,\n        \"totalFat\": totalFat !== '' ? parseInt(totalFat) : 0,\n        \"cholesterol\": cholesterol !== '' ? parseInt(cholesterol) : 0,\n        \"sodium\": sodium !== '' ? parseInt(sodium) : 0,\n        \"potasium\": potasium !== '' ? parseInt(potasium) : 0,\n        \"carbs\": carbs !== '' ? parseInt(carbs) : 0,\n        \"fiber\": fiber !== '' ? parseInt(fiber) : 0,\n        \"sugars\": sugars !== '' ? parseInt(sugars) : 0,\n        \"protein\": protein !== '' ? parseInt(protein) : 0,\n        \"vita\": vita !== '' ? parseInt(vita) : 0,\n        \"vitc\": vitc !== '' ? parseInt(vitc) : 0,\n        \"calcium\": calcium !== '' ? parseInt(calcium) : 0,\n        \"iron\": iron !== '' ? parseInt(iron) : 0\n      }\n\n    }\n    props.actionCall(newItem);\n  }\n\n  return(\n  <div className=\"createCard\">\n    <div className=\"mainCard\" onClick={(event) => expandCard(event)}>\n      <p>Create \"{props.search}\"</p>\n    </div>\n    <div className=\"subCard\">\n\n        <input className=\"createInput\" type=\"text\" value={props.search} onChange={(event) => props.updateSearch(event.target.value)} placeholder=\"Name...\"></input>\n        <input className=\"createInput\" type=\"text\" value={calories} onChange={(event) => setCalories(event.target.value)} placeholder=\"Calories...\"></input>\n        <input className=\"createInput\" type=\"text\" value={totalFat} onChange={(event) => setTotalFat(event.target.value)} placeholder=\"Total Fat (g)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={cholesterol} onChange={(event) => setCholesterol(event.target.value)} placeholder=\"Cholesterol (mg)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={sodium} onChange={(event) => setSodium(event.target.value)} placeholder=\"Sodium (mg)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={potasium} onChange={(event) => setPotasium(event.target.value)} placeholder=\"Potasium (mg)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={carbs} onChange={(event) => setCarbs(event.target.value)} placeholder=\"Carbs (g)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={fiber} onChange={(event) => setFiber(event.target.value)} placeholder=\"Fiber (g)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={sugars} onChange={(event) => setSugar(event.target.value)} placeholder=\"Sugar (g)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={protein} onChange={(event) => setProtein(event.target.value)} placeholder=\"Protein (g)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={vita} onChange={(event) => setVita(event.target.value)} placeholder=\"Vitamin A (%)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={vitc} onChange={(event) => setVitc(event.target.value)} placeholder=\"Vitamin C (%)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={calcium} onChange={(event) => setCalcium(event.target.value)} placeholder=\"Calcium (%)...\"></input>\n        <input className=\"createInput\" type=\"text\" value={iron} onChange={(event) => setIron(event.target.value)} placeholder=\"Iron (%)...\"></input>\n\n        { props.actionLabel &&\n            <div className=\"cardAction\" onClick={() => addNewItem()}><p className={props.actionStyle}>{props.actionLabel}</p></div>\n        }\n    </div>\n  </div>\n  );\n}\n\n\nexport default CreateCard;\n","import React, { useState, useEffect } from 'react';\nimport ItemCard from './ItemCard';\nimport CreateCard from './CreateCard';\n\nfunction FoodDatabase(props){\n\n  //searchResults stores the immediate response of the \"db\"\n  const [searchResults, setSearchResults] = useState([]);\n  //foodItems stores the rendered versions of searchResults\n  const [foodItems, setFoodItems] = useState([]);\n\n\n  //This is the primitive frontend search I created to filter through the dummy data\n  function filterSearch(item){\n\n    var ret = false;\n\n    if(item[\"name\"].toLowerCase().indexOf(props.search.toLowerCase()) === 0 || (item[\"name\"].toLowerCase().indexOf(props.search.toLowerCase()) >= 0 && item[\"name\"].charAt(item[\"name\"].toLowerCase().indexOf(props.search.toLowerCase())-1) === \" \")){\n      ret = true;\n    }\n\n    item[\"name\"].split(\" \").forEach((word) => {\n      if(word.toLowerCase().indexOf(props.search.toLowerCase()) === 0){\n        ret = true;\n      }\n    });\n    item[\"source\"].split(\" \").forEach((word) => {\n      if(word.toLowerCase().indexOf(props.search.toLowerCase()) === 0){\n        ret = true;\n      }\n    });\n\n    return (ret);\n  }\n\n\n  //This would be ths section where I make API search calls\n  useEffect(() => {\n      let res = require('./data/foodDB.json');\n      setSearchResults(res[\"items\"]);\n  }, [props.search]);\n\n  //This is to re-render the list of items and their props as needed\n  useEffect(() => {\n    setFoodItems(searchResults.filter(filterSearch).map((item, index) =>\n      <div key={index}><ItemCard item={item} expanded={false} actionStyle=\"add\" actionCall={(item) => props.addFood(item)} actionLabel=\"ADD\"/></div>\n    ));\n  }, [props.search, searchResults, props.meal])\n\n\n\n  if(props.search === ''){\n    return null;\n  } else {\n    return(\n      <div>{foodItems}\n      <div><CreateCard search={props.search} actionStyle=\"add\" actionCall={(item) => props.addFood(item)} actionLabel=\"ADD NEW ITEM\" updateSearch={(value) => props.updateSearch(value)}/></div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default FoodDatabase;\n","import React, { useState } from 'react';\nimport SearchBar from './SearchBar';\nimport FoodDatabase from './FoodDatabase';\nimport './styles/search.scss'\n\nfunction Search(props){\n\n  //Stores the current search query - updated upon keystroke\n  const [currentSearch, setCurrentSearch] = useState('');\n\n\n  return(\n    <div className=\"searchArea\">\n      <div className=\"arrow-up\"></div>\n      <SearchBar currentSearch={currentSearch} updateSearch={(update) => setCurrentSearch(update)}/>\n      <FoodDatabase search={currentSearch} meal={props.meal} addFood={(item) => props.setLog(item)} updateSearch={(update) => setCurrentSearch(update)}/>\n    </div>\n  );\n}\n\n\nexport default Search;\n","import React, { useState } from 'react';\nimport ItemCard from './ItemCard';\nimport Search from './Search';\nimport './styles/MealList.scss'\n\nfunction MealList(props){\n\n  //This state is used to toggle the search feature for the meal - you can see in the below render, it is a conditional for rendering the Search componenet\n  const [activeSearch, setActiveSearch] = useState(false);\n\n  //Function to remove a food item to a meal list\n  function removeMeal(index){\n    let update = props.meal.slice();\n    update.splice(index, 1);\n    props.updateMeal(update);\n  }\n\n  //Function to add a food item to a meal list\n  function addMeal(item){\n    let update = props.meal.concat([item]);\n    props.updateMeal(update);\n  }\n\n\n  //Renders meal item cards\n  const items = props.meal;\n  const listItems = items.map((item, index) => {\n    return(\n      <div key={index}><ItemCard item={item} expanded={false} actionStyle=\"remove\" actionCall={(item) => removeMeal(index)} actionLabel=\"REMOVE\"/></div>\n    )\n  });\n\n\n  return (\n    <div className={props.mealName+\"List mealList\"}>\n      <h2 className=\"mealHeaderName\">{props.mealName}</h2>\n      <div>{listItems}\n      <div className=\"searchControl\" onClick={() => setActiveSearch(!activeSearch)}>{(activeSearch) ? \"Close\" : \"Add\"}</div>\n      </div>\n      {\n        activeSearch &&\n        <Search meal={props.meal} setLog={(item) => addMeal(item)}/>\n      }\n    </div>\n  );\n}\n\nexport default MealList;\n","import React from 'react';\nimport './styles/NutritionSummary.scss';\n\nfunction NutritionSummary(props){\n\n  //Used to toggle-slide the Nutritition Summary section\n  function expandSummary(e){\n    e.currentTarget.classList.toggle(\"active\");\n    var content = e.currentTarget.nextElementSibling\n    if (content.style.maxHeight){\n      content.style.maxHeight = null;\n      content.classList.toggle(\"active\");\n    } else {\n      content.style.maxHeight = (content.scrollHeight * 1.10) + \"px\";\n      content.classList.toggle(\"active\");\n    }\n  }\n\n  return(\n    <div className=\"nutritionSummary\">\n      <h2 className=\"nutritionTitle\" onClick={(event) => expandSummary(event)}>Nutrition Summary</h2>\n      <div className=\"collapsableSummary\">\n\n        <div className=\"arrow-up\"></div>\n\n        <h2>2000<span className=\"calSub\"> GOAL</span> - {props.calories}<span className=\"calSub\"> CONSUMED TODAY</span> = <span className=\"resultCal\">{2000-props.calories}<span className=\"calSub\"> REMAINING CALORIES</span></span></h2>\n\n\n        <div className=\"nutritionDetails\">\n          <p>Total Fat: <span className=\"nutData\">{props.nutrition[\"totalFat\"] + \" g\"}</span></p>\n          <br></br>\n          <p>Cholesterol: <span className=\"nutData\">{props.nutrition[\"cholesterol\"] + \" mg\"}</span></p>\n          <br></br>\n          <p>Sodium: <span className=\"nutData\">{props.nutrition[\"sodium\"] + \" mg\"}</span></p>\n          <br></br>\n          <p>Potasium: <span className=\"nutData\">{props.nutrition[\"potasium\"] + \" mg\"}</span></p>\n          <br></br>\n          <p>Carbs: <span className=\"nutData\">{props.nutrition[\"carbs\"] + \" g\"}</span></p>\n          <br></br>\n          <p>Fiber: <span className=\"nutData\">{props.nutrition[\"fiber\"] + \" g\"}</span></p>\n          <br></br>\n          <p>Sugars: <span className=\"nutData\">{props.nutrition[\"sugars\"] + \" g\"}</span></p>\n          <br></br>\n          <p>Protein: <span className=\"nutData\">{props.nutrition[\"protein\"] + \" g\"}</span></p>\n          <br></br>\n          <p>Vitamin A: <span className=\"nutData\">{props.nutrition[\"vita\"] + \"%\"}</span></p>\n          <br></br>\n          <p>Vitamin C: <span className=\"nutData\">{props.nutrition[\"vitc\"] + \"%\"}</span></p>\n          <br></br>\n          <p>Calium: <span className=\"nutData\">{props.nutrition[\"calcium\"] + \"%\"}</span></p>\n          <br></br>\n          <p>Iron: <span className=\"nutData\">{props.nutrition[\"iron\"] + \"%\"}</span></p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NutritionSummary;\n","import React from 'react';\nimport MealList from './MealList';\nimport NutritionSummary from './NutritionSummary';\nimport './styles/LogList.scss';\n\nfunction LogList(props){\n  return(\n    <div className=\"loglist\">\n      <h1 id=\"logDate\">{props.date}</h1>\n      <h1 id=\"logChange\"><span className=\"logChange\" onClick={() => props.changeLog(props.logInd+1)}>{(props.logInd < props.totalLogs-1) ? \"← \" : \"\"}</span>  <span className=\"logChange\" onClick={() => props.changeLog(props.logInd-1)}>{(props.logInd > 0) ? \" →\" : \"\"}</span></h1>\n      <NutritionSummary nutrition={props.nutrition} calories={props.calories} />\n\n      <div className=\"mealsSection\">\n      <MealList mealName=\"breakfast\" meal={props.meals[\"breakfast\"]} updateMeal={(update) => props.setLog[\"breakfast\"](update)}/>\n      <MealList mealName=\"lunch\" meal={props.meals[\"lunch\"]} updateMeal={(update) => props.setLog[\"lunch\"](update)}/>\n      <MealList mealName=\"dinner\" meal={props.meals[\"dinner\"]} updateMeal={(update) => props.setLog[\"dinner\"](update)}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default LogList;\n","import React, { useState, useEffect} from 'react';\nimport LogList from './LogList';\nimport './styles/App.scss';\n\n\nfunction App() {\n\n  //State used to fake data/server reqs\n  const [logInd, setLogInd] = useState(0);\n  const [totalLogs, setTotalLogs] = useState(null);\n\n  //Application's overall state\n  const [date, setDate] = useState(null);\n  const [calories, setCalories] = useState(null);\n  const [breakfast, setBreakfast] = useState([]);\n  const [lunch, setLunch] = useState([]);\n  const [dinner, setDinner] = useState([]);\n  const [nutrition, setNutrition] = useState({});\n\n  //Setting the data/server states\n  useEffect(() => {\n    var input = require('./data/userLog.json');\n    setTotalLogs(input[\"logs\"].length);\n  }, []);\n\n  //Used to application state when user switches to a different day's log\n  useEffect(() => {\n    var input = require('./data/userLog.json');\n    var data = input[\"logs\"][logInd];\n    setDate(data[\"date\"]);\n    setCalories(data[\"calories\"]);\n    setBreakfast(data[\"breakfast\"]);\n    setLunch(data[\"lunch\"]);\n    setDinner(data[\"dinner\"]);\n\n  }, [logInd]);\n\n\n\n  //When meals are updated, update the calorie count and push updates to DB\n  useEffect(() => {\n    let sum = 0;\n    var nutri = {\n      \"totalFat\": 0,\n      \"cholesterol\": 0,\n      \"sodium\": 0,\n      \"potasium\": 0,\n      \"carbs\": 0,\n      \"fiber\": 0,\n      \"sugars\": 0,\n      \"protein\": 0,\n      \"vita\": 0,\n      \"vitc\": 0,\n      \"calcium\": 0,\n      \"iron\": 0\n    }\n\n    breakfast.forEach((item) => {\n      sum+=item[\"nutrition\"][\"calories\"];\n\n      for(var key in nutri){\n        nutri[key] += item[\"nutrition\"][key];\n      }\n    })\n    lunch.forEach((item) => {\n      sum+=item[\"nutrition\"][\"calories\"];\n      for(var key in nutri){\n        nutri[key] += item[\"nutrition\"][key];\n      }\n    })\n    dinner.forEach((item) => {\n      sum+=item[\"nutrition\"][\"calories\"];\n      for(var key in nutri){\n        nutri[key] += item[\"nutrition\"][key];\n      }\n    })\n\n    setNutrition(nutri);\n    setCalories(sum);\n\n    //Would make POST request here to update user's log in DB\n  }, [breakfast, lunch, dinner]);\n\n  if(date === null){\n    return(null);\n  } else {\n    return (\n      <div className=\"App\">\n\n        <h3 id=\"appTitle\">MyFoodDiary</h3>\n        <p id=\"titleSubtext\">for</p>\n\n        <LogList\n        meals={{\n          \"breakfast\": breakfast,\n          \"lunch\": lunch,\n          \"dinner\": dinner\n        }}\n        date={date}\n        calories={calories}\n        setLog={{\n          \"breakfast\": (update) => setBreakfast(update),\n          \"lunch\": (update) => setLunch(update),\n          \"dinner\": (update) => setDinner(update)\n        }}\n        nutrition={nutrition}\n        logInd={logInd}\n        changeLog={(update) => setLogInd(update)}\n        totalLogs={totalLogs}\n        />\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}